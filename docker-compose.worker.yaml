version: '3.8'
services:
  # app3: 
  #   container_name: app
  #   build: 
  #     context: .
  #     dockerfile: Dockerfile.app
  #   # command: "tail -f /dev/null"
  # #   command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
  #   volumes:
  #     - .:/app
  #   ports:
  #     - 8000:8000
  #   restart: always
  #   depends_on:
  #     - redis
  # redis:
  #   image: redis
  #   ports:
  #     - "6379:6379"
  # celery_worker: &wokermain
  #   # container_name: celery_worker
  #   build: .
  #   command: celery -A celery_worker worker --pool=solo --loglevel=info
  #   volumes:
  #     - .:/app
  #   depends_on:
  # #     - redis
  # #     # - app
  # # # celery_worker2:
  # # #   <<: *wokermain






  worker: &wokermain
    # Build using the worker Dockerfile
    build:
      context: .
      dockerfile: Dockerfile.worker
    # Need to access the database
    # OPTIONAL: If you worker needs to access your db that is deployed
    # locally, then make the network mode as host.
    # network_mode: host
    # Pass the rabbitmq_uri as env varible in order to
    # connect to our service
    
    environment:
      # NOTE: Below we are using 127.0.0.1 because this container
      # will run on the host network, thus it will have access to the
      # host network.
      # If it would not have run locally, we would have had to
      # connect using the service name like following:
      # amqp:rabbitmq_server:5672
      rabbitmq_uri: amqp://127.0.0.1:5672
    depends_on: 
      - rabbitmq_server
    volumes:
      - app:/app

  # worker2:
  #   <<: *wokermain

volumes:
  app: